{
  "openapi": "3.0.1",
  "info": {
    "title": "Mi API",
    "description": "API para gestionar profesores, estudiantes, cursos y calificaciones",
    "contact": {
      "name": "Jean Carlo Viaña De Mares",
      "email": "jeanvianademares@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Inicia sesión y devuelve un token JWT.",
        "requestBody": {
          "description": "Credenciales del usuario (username y password).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Devuelve el token JWT."
          },
          "401": {
            "description": "Si las credenciales son inválidas.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registra un nuevo usuario.",
        "requestBody": {
          "description": "Datos del usuario a registrar (username y password).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Usuario registrado correctamente."
          },
          "400": {
            "description": "Si los datos son inválidos o el usuario ya existe.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/course": {
      "get": {
        "tags": [
          "Course"
        ],
        "summary": "Obtiene una lista de todos los cursos con filtros opcionales.",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filtro por nombre del curso (opcional).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "professorId",
            "in": "query",
            "description": "Filtro por ID del profesor (opcional).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Devuelve la lista de cursos."
          }
        }
      },
      "post": {
        "tags": [
          "Course"
        ],
        "summary": "Crea un nuevo curso.",
        "requestBody": {
          "description": "Datos del curso a crear.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CourseDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CourseDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CourseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Devuelve el curso creado."
          },
          "400": {
            "description": "Si los datos de entrada son inválidos."
          }
        }
      }
    },
    "/api/course/{id}": {
      "get": {
        "tags": [
          "Course"
        ],
        "summary": "Obtiene un curso específico por su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "El ID del curso a buscar.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Devuelve el curso encontrado."
          },
          "404": {
            "description": "Si el curso no se encuentra."
          }
        }
      },
      "put": {
        "tags": [
          "Course"
        ],
        "summary": "Actualiza un curso existente.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "El ID del curso a actualizar.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Datos actualizados del curso.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CourseDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CourseDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CourseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Si el curso se actualizó correctamente."
          },
          "400": {
            "description": "Si los datos de entrada son inválidos."
          },
          "404": {
            "description": "Si el curso no se encuentra."
          }
        }
      },
      "delete": {
        "tags": [
          "Course"
        ],
        "summary": "Elimina un curso por su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "El ID del curso a eliminar.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Si el curso se eliminó correctamente."
          },
          "404": {
            "description": "Si el curso no se encuentra."
          }
        }
      }
    },
    "/api/grades": {
      "get": {
        "tags": [
          "Grades"
        ],
        "summary": "Obtiene una lista de todas las calificaciones con filtros opcionales.",
        "parameters": [
          {
            "name": "studentId",
            "in": "query",
            "description": "Filtro por ID del estudiante (opcional).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "courseId",
            "in": "query",
            "description": "Filtro por ID del curso (opcional).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "gradeValueMin",
            "in": "query",
            "description": "Filtro por valor mínimo de la calificación (opcional).",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "gradeValueMax",
            "in": "query",
            "description": "Filtro por valor máximo de la calificación (opcional).",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Devuelve la lista de calificaciones."
          }
        }
      },
      "post": {
        "tags": [
          "Grades"
        ],
        "summary": "Crea una nueva calificación asociada a un estudiante y curso.",
        "requestBody": {
          "description": "Datos de la calificación a crear.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GradeDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GradeDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GradeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Devuelve la calificación creada."
          },
          "400": {
            "description": "Si los datos de entrada son inválidos."
          }
        }
      }
    },
    "/api/grades/{id}": {
      "get": {
        "tags": [
          "Grades"
        ],
        "summary": "Obtiene una calificación específica por su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "El ID de la calificación a buscar.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Devuelve la calificación encontrada."
          },
          "404": {
            "description": "Si la calificación no se encuentra."
          }
        }
      },
      "put": {
        "tags": [
          "Grades"
        ],
        "summary": "Actualiza una calificación existente.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "El ID de la calificación a actualizar.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Datos actualizados de la calificación.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GradeDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GradeDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GradeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Si la calificación se actualizó correctamente."
          },
          "400": {
            "description": "Si los datos de entrada son inválidos."
          },
          "404": {
            "description": "Si la calificación no se encuentra."
          }
        }
      },
      "delete": {
        "tags": [
          "Grades"
        ],
        "summary": "Elimina una calificación por su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "El ID de la calificación a eliminar.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Si la calificación se eliminó correctamente."
          },
          "404": {
            "description": "Si la calificación no se encuentra."
          }
        }
      }
    },
    "/api/professor": {
      "get": {
        "tags": [
          "Professor"
        ],
        "summary": "Obtiene una lista de todos los profesores con filtros opcionales.",
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "description": "Filtro por nombre del profesor (opcional).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Filtro por apellido del profesor (opcional).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filtro por email del profesor (opcional).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Devuelve la lista de profesores."
          }
        }
      },
      "post": {
        "tags": [
          "Professor"
        ],
        "summary": "Crea un nuevo profesor.",
        "requestBody": {
          "description": "Datos del profesor a crear.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfessorDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfessorDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProfessorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Devuelve el profesor creado."
          },
          "400": {
            "description": "Si los datos de entrada son inválidos."
          }
        }
      }
    },
    "/api/professor/{id}": {
      "get": {
        "tags": [
          "Professor"
        ],
        "summary": "Obtiene un profesor específico por su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "El ID del profesor a buscar.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Devuelve el profesor encontrado."
          },
          "404": {
            "description": "Si el profesor no se encuentra."
          }
        }
      },
      "put": {
        "tags": [
          "Professor"
        ],
        "summary": "Actualiza un profesor existente.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "El ID del profesor a actualizar.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Datos actualizados del profesor.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfessorDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfessorDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProfessorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Si el profesor se actualizó correctamente."
          },
          "400": {
            "description": "Si los datos de entrada son inválidos."
          },
          "404": {
            "description": "Si el profesor no se encuentra."
          }
        }
      },
      "delete": {
        "tags": [
          "Professor"
        ],
        "summary": "Elimina un profesor por su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "El ID del profesor a eliminar.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Si el profesor se eliminó correctamente."
          },
          "404": {
            "description": "Si el profesor no se encuentra."
          }
        }
      }
    },
    "/api/student": {
      "get": {
        "tags": [
          "Students"
        ],
        "summary": "Obtiene una lista de todos los estudiantes con filtros opcionales.",
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "description": "Filtro por nombre del estudiante (opcional).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Filtro por apellido del estudiante (opcional).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filtro por email del estudiante (opcional).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Devuelve la lista de estudiantes."
          }
        }
      },
      "post": {
        "tags": [
          "Students"
        ],
        "summary": "Crea un nuevo estudiante.",
        "requestBody": {
          "description": "Datos del estudiante a crear.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StudentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Devuelve el estudiante creado."
          },
          "400": {
            "description": "Si los datos de entrada son inválidos."
          }
        }
      }
    },
    "/api/student/{id}": {
      "get": {
        "tags": [
          "Students"
        ],
        "summary": "Obtiene un estudiante específico por su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "El ID del estudiante a buscar.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Devuelve el estudiante encontrado."
          },
          "404": {
            "description": "Si el estudiante no se encuentra."
          }
        }
      },
      "put": {
        "tags": [
          "Students"
        ],
        "summary": "Actualiza un estudiante existente.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "El ID del estudiante a actualizar.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Datos actualizados del estudiante.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StudentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Si el estudiante se actualizó correctamente."
          },
          "400": {
            "description": "Si los datos de entrada son inválidos."
          },
          "404": {
            "description": "Si el estudiante no se encuentra."
          }
        }
      },
      "delete": {
        "tags": [
          "Students"
        ],
        "summary": "Elimina un estudiante por su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "El ID del estudiante a eliminar.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Si el estudiante se eliminó correctamente."
          },
          "404": {
            "description": "Si el estudiante no se encuentra."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CourseDto": {
        "required": [
          "description",
          "name",
          "professorId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "professorId": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GradeDto": {
        "required": [
          "courseId",
          "date",
          "gradeValue",
          "studentId"
        ],
        "type": "object",
        "properties": {
          "studentId": {
            "type": "integer",
            "format": "int32"
          },
          "courseId": {
            "type": "integer",
            "format": "int32"
          },
          "gradeValue": {
            "type": "number",
            "format": "double"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ProfessorDto": {
        "required": [
          "email",
          "firstName",
          "lastName",
          "specialty"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "lastName": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "specialty": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "StudentDto": {
        "required": [
          "email",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "email": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "format": "email"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Por favor ingresa el token JWT con el formato 'Bearer {token}'",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}